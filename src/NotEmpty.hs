{-# LANGUAGE ExplicitNamespaces   #-}
{-# LANGUAGE FlexibleInstances    #-}
{-# LANGUAGE TypeSynonymInstances #-}

module NotEmpty where

import           Control.Applicative (Const (Const))
import           Data.Can (Can (Non))
import           Data.Functor.Identity (Identity (Identity))
import           Data.Set (Set)
import qualified Data.Set.Ordered as OSet
import           Data.Set.Ordered (OSet)
import           Data.Set.Unicode ((‚àÖ))
import           Data.Smash (Smash (Nada))
import           Data.Wedge (Wedge (Nowhere))
import           Numeric.Natural.Unicode (‚Ñï)
import           Prelude.Unicode (‚Ñ§)
import           Finite (Fin‚ÇÅ, Fin‚ÇÇ, Fin‚ÇÉ, Fin‚ÇÑ, Fin‚ÇÖ, Fin‚ÇÜ, Fin‚Çá, Fin‚Çà, Fin‚Çâ, Fin‚ÇÅ‚ÇÄ, Fin‚ÇÅ‚ÇÅ, Fin‚ÇÅ‚ÇÇ, Fin‚ÇÅ‚ÇÉ, Fin‚ÇÅ‚ÇÑ, Fin‚ÇÅ‚ÇÖ,
                         Quadrant (Q‚ÇÅ), Octant (O‚ÇÅ), Alpha (A), DNA (Adenine), Month (January),
                         Card (Card), Rank (Two), Suit (Spade),
                         type (üÅ¢), (üÅ£), type (üÄ∞), (üÄ±), type (:üé≤), (‚öÄ), Checker, (‚õÄ),
                         Init (..), Final (..))

-- TODO experimental
-- A wrapper for some type `a` which is known to be not empty (the proof of
-- which is witnessed by `wit`).
-- TODO there are some practices/laws for this class which I should formalize
class NotEmpty a where
  wit ‚à∑ a

instance NotEmpty () where
  wit  ‚à∑ ()
  wit  = ()
instance NotEmpty Init where
  wit  ‚à∑ Init
  wit  = Init ()
instance NotEmpty Final where
  wit  ‚à∑ Final
  wit  = Final ()
instance NotEmpty Bool where
  wit  ‚à∑ Bool
  wit  = False
instance NotEmpty Ordering where
  wit  ‚à∑ Ordering
  wit  = LT
instance NotEmpty Quadrant where
  wit  ‚à∑ Quadrant
  wit  = Q‚ÇÅ
instance NotEmpty Octant where
  wit  ‚à∑ Octant
  wit  = O‚ÇÅ
instance NotEmpty Fin‚ÇÅ where
  wit ‚à∑ Fin‚ÇÅ
  wit = 0
instance NotEmpty Fin‚ÇÇ where
  wit ‚à∑ Fin‚ÇÇ
  wit = 0
instance NotEmpty Fin‚ÇÉ where
  wit ‚à∑ Fin‚ÇÉ
  wit = 0
instance NotEmpty Fin‚ÇÑ where
  wit ‚à∑ Fin‚ÇÑ
  wit = 0
instance NotEmpty Fin‚ÇÖ where
  wit ‚à∑ Fin‚ÇÖ
  wit = 0
instance NotEmpty Fin‚ÇÜ where
  wit ‚à∑ Fin‚ÇÜ
  wit = 0
instance NotEmpty Fin‚Çá where
  wit ‚à∑ Fin‚Çá
  wit = 0
instance NotEmpty Fin‚Çà where
  wit ‚à∑ Fin‚Çà
  wit = 0
instance NotEmpty Fin‚Çâ where
  wit ‚à∑ Fin‚Çâ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÄ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÄ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÅ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÅ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÇ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÇ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÉ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÉ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÑ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÑ
  wit = 0
instance NotEmpty Fin‚ÇÅ‚ÇÖ where
  wit ‚à∑ Fin‚ÇÅ‚ÇÖ
  wit = 0
instance NotEmpty ‚Ñï where
  wit ‚à∑ ‚Ñï
  wit = 0
instance NotEmpty ‚Ñ§ where
  wit ‚à∑ ‚Ñ§
  wit = 0

instance NotEmpty Char where
  wit ‚à∑ Char
  wit = '\NUL'
instance NotEmpty Alpha where
  wit ‚à∑ Alpha
  wit = A
instance NotEmpty DNA where
  wit ‚à∑ DNA
  wit = Adenine
instance NotEmpty Suit where
  wit ‚à∑ Suit
  wit = Spade
instance NotEmpty Rank where
  wit ‚à∑ Rank
  wit = Two
instance NotEmpty Card where
  wit ‚à∑ Card
  wit = Card wit wit
instance NotEmpty (:üé≤) where
  wit ‚à∑ (:üé≤)
  wit = (‚öÄ)
instance NotEmpty (üÅ¢) where
  wit ‚à∑ (üÅ¢)
  wit = (üÅ£)
instance NotEmpty (üÄ∞) where
  wit ‚à∑ (üÄ∞)
  wit = (üÄ±)
instance NotEmpty Checker where
  wit ‚à∑ Checker
  wit = (‚õÄ)
instance NotEmpty Month where
  wit ‚à∑ Month
  wit = January

instance NotEmpty [a] where
  wit ‚à∑ [a]
  wit = []
instance NotEmpty (Maybe a) where
  wit ‚à∑ Maybe a
  wit = Nothing
instance NotEmpty (Smash a b) where
  wit ‚à∑ Smash a b
  wit = Nada
instance NotEmpty (Wedge a b) where
  wit ‚à∑ Wedge a b
  wit = Nowhere
instance NotEmpty (Can a b) where
  wit ‚à∑ Can a b
  wit = Non
instance NotEmpty (Set a) where
  wit ‚à∑ Set a
  wit = (‚àÖ)
instance NotEmpty (OSet a) where
  wit ‚à∑ OSet a
  wit = OSet.empty
instance (NotEmpty a) ‚áí NotEmpty (Const a b) where
  wit ‚à∑ Const a b
  wit = Const wit
instance (NotEmpty a) ‚áí NotEmpty (Identity a) where
  wit ‚à∑ Identity a
  wit = Identity wit
instance (NotEmpty a, NotEmpty b) ‚áí NotEmpty (a, b) where
  wit ‚à∑ (a, b)
  wit = (wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c) ‚áí NotEmpty (a, b, c) where
  wit ‚à∑ (a, b, c)
  wit = (wit, wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c, NotEmpty d) ‚áí NotEmpty (a, b, c, d) where
  wit ‚à∑ (a, b, c, d)
  wit = (wit, wit, wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c, NotEmpty d, NotEmpty e) ‚áí NotEmpty (a, b, c, d, e) where
  wit ‚à∑ (a, b, c, d, e)
  wit = (wit, wit, wit, wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c, NotEmpty d, NotEmpty e, NotEmpty f) ‚áí NotEmpty (a, b, c, d, e, f) where
  wit ‚à∑ (a, b, c, d, e, f)
  wit = (wit, wit, wit, wit, wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c, NotEmpty d, NotEmpty e, NotEmpty f, NotEmpty g) ‚áí NotEmpty (a, b, c, d, e, f, g) where
  wit ‚à∑ (a, b, c, d, e, f, g)
  wit = (wit, wit, wit, wit, wit, wit, wit)
instance (NotEmpty a, NotEmpty b, NotEmpty c, NotEmpty d, NotEmpty e, NotEmpty f, NotEmpty g, NotEmpty h) ‚áí NotEmpty (a, b, c, d, e, f, g, h) where
  wit ‚à∑ (a, b, c, d, e, f, g, h)
  wit = (wit, wit, wit, wit, wit, wit, wit, wit)
